//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : 2010-06-23(StabilimentoBalneare)
//  @ File Name : StabilimentoBalneare.java
//  @ Date : 23/06/2010
//  @ Author : michrag
//
//
package dominio;

import java.util.*;

public class StabilimentoBalneare
{
    private List<Ombrellone> ombrelloni;
    private List<Cabina> cabine;
    private List<Cliente> clienti;

    // pattern Singleton
    private static StabilimentoBalneare instance = null;

    private StabilimentoBalneare()
    {
        ombrelloni = new ArrayList<Ombrellone>();
        cabine = new ArrayList<Cabina>();
        clienti = new ArrayList<Cliente>();
    }

    public static StabilimentoBalneare getInstance()
    {
        if(instance == null)
        {
            instance = new StabilimentoBalneare();
        }

        return instance;
    }
    // fine pattern Singleton

    public void addOmbrellone(Ombrellone o)
    {
        ombrelloni.add(o);
    }

    public Ombrellone getOmbrellone(String posizione)
    {
        for(Iterator<Ombrellone> i = ombrelloni.iterator(); i.hasNext();)
        {
            Ombrellone ombrellone = (Ombrellone)i.next();

            if(ombrellone.getPosizione().equalsIgnoreCase(posizione))
            {
                return ombrellone;
            }
        }

        throw new RuntimeException("Ombrellone inesistente.");
    }


    public List<Ombrellone> getOmbrelloni()
    {
        return ombrelloni;
    }

    public void addCabina(Cabina c)
    {
        cabine.add(c);
    }

    public Cabina getCabina(int numeroCabina)
    {
        for(Iterator<Cabina> i = cabine.iterator(); i.hasNext();)
        {
            Cabina cabina = (Cabina)i.next();

            if(cabina.getNumero() == numeroCabina)
            {
                return cabina;
            }
        }

        throw new RuntimeException("Cabina inesistente.");
    }


    public List<Cabina> getCabine()
    {
        return cabine;
    }

    public void addCliente(Cliente c)
    {
        clienti.add(c);
    }

    public Cliente getCliente(String nomeCliente)
    {
        for(Iterator<Cliente> i = clienti.iterator(); i.hasNext();)
        {
            Cliente cliente = (Cliente)i.next();

            if(cliente.getNome().equalsIgnoreCase(nomeCliente))
            {
                return cliente;
            }
        }

        throw new RuntimeException("Cliente inesistente.");
    }

    public List<Cliente> getClienti()
    {
        return clienti;
    }



}
