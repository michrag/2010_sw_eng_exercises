//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : 2010-04-21(Condominii)
//  @ File Name : StudioProfessionale.java
//  @ Date : 19/06/2010
//  @ Author : michrag
//
//

package dominio;

import java.util.*;

public class StudioProfessionale
{
    private List<Condominio> condominii;
    private List<Proprietario> proprietari;
    private List<AnnoFiscale> anniFiscali;

    // pattern Singleton
    private static StudioProfessionale instance = null;

    private StudioProfessionale()
    {
        condominii = new ArrayList<Condominio>();
        proprietari = new ArrayList<Proprietario>();
        anniFiscali = new ArrayList<AnnoFiscale>();
    }

    public static StudioProfessionale getInstance()
    {
        if(instance == null)
        {
            instance = new StudioProfessionale();
        }

        return instance;
    }
    // fine pattern Singleton

    public void addCondominio(Condominio c)
    {
        condominii.add(c);
    }

    public Condominio getCondominio(String nomeCondominio)
    {
        for(Iterator<Condominio> i = condominii.iterator(); i.hasNext();)
        {
            Condominio condominio = (Condominio)i.next();

            if(condominio.getNome().equalsIgnoreCase(nomeCondominio))
            {
                return condominio;
            }
        }

        throw new RuntimeException("Condominio inesistente.");
    }

    public List<Condominio> getCondominii()
    {
        return condominii;
    }

    public void addProprietario(Proprietario p)
    {
        proprietari.add(p);
    }

    public Proprietario getProprietario(String nomeProprietario)
    {
        for(Iterator<Proprietario> i = proprietari.iterator(); i.hasNext();)
        {
            Proprietario proprietario = (Proprietario)i.next();

            if(proprietario.getNome().equalsIgnoreCase(nomeProprietario))
            {
                return proprietario;
            }
        }

        throw new RuntimeException("Proprietario inesistente.");
    }

    public List<Proprietario> getProprietari()
    {
        return proprietari;
    }

    public void addAnnoFiscale(AnnoFiscale af)
    {
        anniFiscali.add(af);
    }

    public AnnoFiscale getAnnoFiscale(int anno)
    {
        for(Iterator<AnnoFiscale> i = anniFiscali.iterator(); i.hasNext();)
        {
            AnnoFiscale annoFiscale = (AnnoFiscale)i.next();

            if(annoFiscale.getAnno() == anno)
            {
                return annoFiscale;
            }
        }

        throw new RuntimeException("AnnoFiscale inesistente.");
    }

    public List<AnnoFiscale> getAnniFiscali()
    {
        return anniFiscali;
    }

}
